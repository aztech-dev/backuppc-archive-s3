#!/usr/bin/python -W ignore::DeprecationWarning
# A BackupPC script to archive a host's files to Amazon S3.
#
# Point $Conf{ArchiveClientCmd} at me.
# Requires python-boto
#
# Usage: BackupPC_archiveHost tarCreatePath splitPath parPath host bkupNum \
#             compPath fileExt splitSize outLoc parFile share
#
# Create secrets.py such that it has:
# accesskey = 'amazon aws access key'
# sharedkey = 'amazon aws shared key'
# gpgsymmetrickey = 'gpg symmetric key -- make it good, but do not lose it'
#
# Copyright (c) 2009-2011 Ryan S. Tucker
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import glacier_api
import json
import os
import secrets
import sqs_api
import sys
import time

from backup_logger import logger
from glacier_api import GlacierReference
from boto.glacier.exceptions import UnexpectedHTTPResponseError

def handle_notification(vault, message):
    try:
        data = json.loads(message.get_body())
        messageData = json.loads(data['Message']);
    except Exception, e:
        logger.error('Failed to decode data : %s' % e.message)
        return False

    if messageData['Completed'] == True:
        job_id = messageData['JobId']

        logger.info('Downloading file from job %s' % job_id)

        job = vault.get_job(job_id)
        reference = GlacierReference.select().where(GlacierReference.glacierId == job.archive_id)

        try:
            job.download_to_file(job.archive_id + '.tar');
            restore_archive(job.archive_id, reference.restore_path)
        except UnexpectedHTTPResponseError as e:
            logger.error("Error while retrieving data from Glacier: " + e.message);

        return True

def restore_archive(path, restore_path):
    os.rename(path, restore_path)

from boto.sqs.message import RawMessage

if __name__ == '__main__':
    if len(sys.argv) != 1:
        sys.stderr.write("Usage: %s\n" % sys.argv[0])
        sys.stderr.write("Got %d args instead: %s\n" % (len(sys.argv), ", ".join(sys.argv)))
        sys.exit(1)

    accessKey = secrets.accesskey
    sharedKey = secrets.sharedkey
    vaultName = secrets.vault
    region = secrets.region
    queueName = secrets.queueName

    vault = glacier_api.open_store(accessKey, sharedKey, '')

    while True:
        queue = sqs_api.open_queue(region, queueName, accessKey, sharedKey)
        queue.set_message_class(RawMessage)

        if queue == None:
            sys.stderr.write('Failed to get queue')
            sys.exit(2)

        rs = queue.get_messages(1)
        while len(rs) != 0:
            if handle_notification(vault, rs[0]) == True:
                logger.debug('Successfully handled message, deleting')
            else:
                logger.warning('Unhandled message, deleting anyways')
                logger.warning(rs[0].get_body())

            queue.delete_message(rs[0])
            rs = queue.get_messages(1)

        sys.stdout.flush()
        logger.debug('Waiting for new messages (poll interval: 120s)')
        time.sleep(120);